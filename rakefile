ENV['APP_ENV'] ||= 'development'

namespace :db do
  require 'activerecord'
  
  task :environment do
    @app_env = ENV['APP_ENV']
    @db_config = YAML.load_file(File.join(File.dirname(__FILE__), 'database', 'configuration.yml'))
    @migrations_path = File.join('database', 'migrations')
  end
  
  task(:establish_connection => :environment) do
    ActiveRecord::Base.establish_connection(@db_config[@app_env.to_s])
  end
  
  desc 'Migrate the database. Target specific version with VERSION=x'
    task(:migrate => :establish_connection) do
    ActiveRecord::Base.logger = Logger.new(STDOUT)
    ActiveRecord::Migration.verbose = true
    ActiveRecord::Migrator.migrate(@migrations_path, ENV["VERSION"] ? ENV["VERSION"].to_i : nil)
  end
  
  desc 'Creates a new migration'
  task(:migration => :environment) do
    filename = File.join(@migrations_path, "#{Time.now.to_i}.rb")
    puts "Creating #{filename}"
    File.new(filename, "w")
  end
  
  namespace :migrate do
  
    desc  'Rollbacks the database one migration and re-migrate up. If you want to rollback more than one step, define STEP=n'
    task :redo => [ 'db:rollback', 'db:migrate' ]
  
    desc 'Rolls the schema back to the previous version. Specify the number of steps with STEP=n'
    task :rollback => :establish_connection do
      step = ENV['STEP'] ? ENV['STEP'].to_i : 1
      ActiveRecord::Migrator.rollback(@migrations_path, step)
    end
    
    desc 'Runs the "up" for a given migration VERSION.'
    task :up => :establish_connection do
      version = ENV["VERSION"] ? ENV["VERSION"].to_i : nil
      raise "VERSION is required" unless version
      ActiveRecord::Migrator.run(:up, @migrations_path, version)
    end
    
    desc 'Runs the "down" for a given migration VERSION.'
    task :down => :establish_connection do
      version = ENV["VERSION"] ? ENV["VERSION"].to_i : nil
      raise "VERSION is required" unless version
      ActiveRecord::Migrator.run(:down, @migrations_path, version)
    end
    
  end
end